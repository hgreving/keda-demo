Preparations:
turn off remote access
open chrome tab with: https://wiki.schoolmaster.nl/confluence/display/CDS/Whiteboard+session+K8s+and+Terraform+components
open chrome tab with: https://keda.sh
open chrome tab with: https://keda.sh/docs/2.0/scalers/azure-storage-queue/#example
open terminal with: cd C:\Projects\Demos\Scaling\src\Scaling.QueueFillApp (dotnet run 1000)
use demo as the default namespace: kubectl config set-context --current --namespace demo
run storage emulator
open terminal with: kubectl get hpa -w -n demo
open terminal with: kubectl get pods -w -n demo
open code with folder C:\Projects\Demos\Scaling\
Split: ALT + SHIFT + D

Demo Keda - use a function with KEDA to handle fluctuations in Event-driven workloads

Let me show an overview of our ContentDelivery system first:
https://wiki.schoolmaster.nl/confluence/display/CDS/Whiteboard+session+K8s+and+Terraform+components

As you saw in the diagram, we have two Event-driven workloads: UploadReady and SubmitPlagiarism.

We could have 3 pods that are always up and handling all those messages. But that isn't efficient.
For example at 11:00 (eleven) in the morning it's very busy but at 23:00 (eleven) in the evening it's can be very quiet.
Or for example when we start a job that is importing a lot of history documents into our system.

So we need power when it's neccessary. That is possible with KEDA (https://keda.sh/) 
KEDA == Kubernetes Event Driven Autoscaler -> Application autoscaling made simple
KEDA is a Kubernetes-based Event Driven Autoscaler. With KEDA, you can drive the scaling of any container in Kubernetes based on the number of events needing to be processed.
They support a lot of scalers, we use the Azure Storage Queue scaler for example.
https://keda.sh/docs/2.0/scalers/azure-storage-queue/#example

Show the example how you can configure the scaler.

Create new function version
stop functions in k8s remove.sh
docker build -t scaling:demo-v5 .
docker tag scaling:demo-v5 localhost:5000/scaling:demo-v5 
docker push localhost:5000/scaling:demo-v5
start functions in k8s deploy.sh

